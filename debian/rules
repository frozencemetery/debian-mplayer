#!/usr/bin/make -f
###########
## this snippet comes from debhelper-5.0.40/examples/rules.multi2
#
# Based on a sample debian/rules that uses debhelper.
# (That file is public domain software, originally written by Joey Hess.)
#
# This version is for a multibinary package. It also allows you to build any
# of the binary packages independantly, via binary-<package> targets.

# Uncomment this to turn on verbose mode.
#export DH_VERBOSE=1

# This has to be exported to make some magic below work.
export DH_OPTIONS

############

package        := mplayer

## The Subversion revision is not autodetected in some targets!
upstreamversion := 1.0rc2

## We add a ~ to it.
debian_version := 1.0~rc2



svn_revision := $(shell if test -r .svn ; then LC_ALL=C svn info 2> /dev/null | grep Revision | cut -d' ' -f2 ; elif test -r revision.svn ; then cat revision.svn ; fi )

CC_version := $(shell $(CC) -dumpversion)

#UPSTREAMSOURCE := upstream SVN repository
UPSTREAMSOURCE := http://www1.mplayerhq.hu/MPlayer/releases/MPlayer-1.0rc1.tar.bz2

#Was troublesome stuff removed ?
# See target "fix-orig-source" in this makefile.
DFSG := $(shell test -d libdvdcss && echo 'This version of MPlayer contains libdvdcss.' )

ifeq ($(DFSG),)
extraversion := DFSG-free
else
extraversion := DFSG-nonfree
endif



ifeq ($(shell cat /etc/debian_version),3.1) #AKA Sarge
XLIBS := xlibs-dev
else
XLIBS := libx11-dev, libxext-dev, libxinerama-dev, libxv-dev, libxvmc-dev, libxxf86dga-dev, libxxf86vm-dev, x-dev
endif

ifeq  ($(wildcard DOCS/.upstream_ships_docs),DOCS/.upstream_ships_docs)
DOCDEP :=
else
DOCDEP := docbook-xml, docbook-xsl, xsltproc
endif

destdir := $(shell pwd)/debian/$(package)

arch   := $(shell dpkg-architecture -qDEB_HOST_ARCH)
#FIXME: How shall this be used? MPlayer has a non-autoconf configure script.
DEB_HOST_GNU_TYPE   ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
DEB_BUILD_GNU_TYPE  ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
DEB_HOST_ARCH_OS    ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_OS)
DEB_HOST_ARCH_CPU   ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU)


# hi dpkg-buildpackage. nice to see you make the game tougher
CLEAN_ENV=env -u CFLAGS -u CPPFLAGS -u LDFLAGS -u FFLAGS -u CXXFLAGS


## This can be overridden from the command line, see README.Debian.
DEB_BUILD_CONFIGURE=--disable-bitmap-font  --disable-ggi  --disable-xvid --language=all  --disable-xmms --disable-arts --disable-aa --disable-mad --disable-libdv $(archconf)


# Choose whether we want binary codec support (default on unknown archs: no).
with_real_and_xanim = false
with_win32 = false

ifeq ($(arch),i386)
#Avoid high optimization through gcc.
  archconf += --target=i586-linux
  with_real_and_xanim = true
  with_win32 = true
  DEB_BUILD_CONFIGURE += --enable-runtime-cpudetection
endif
ifeq ($(arch),amd64)
  #this needs the patch 
  # http://people.freedesktop.org/~jinghua/real64/mplayer-amd64-real-codecs.diff
  with_real_and_xanim = true
  #this does not compile, though : with_win32 = true
  DEB_BUILD_CONFIGURE += --enable-runtime-cpudetection
endif
ifeq ($(arch),kfreebsd-i386)
  with_real_and_xanim = true
  DEB_BUILD_CONFIGURE += --enable-runtime-cpudetection
endif
ifeq ($(arch),kfreebsd-amd64)
  with_real_and_xanim = true
  DEB_BUILD_CONFIGURE += --enable-runtime-cpudetection
endif
ifeq ($(arch),powerpc)
  with_real_and_xanim = true
  DEB_BUILD_CONFIGURE += --enable-runtime-cpudetection
endif
ifeq ($(arch),alpha)
#Avoid high optimization through gcc.
# see http://permalink.gmane.org/gmane.linux.debian.ports.alpha/7295
  archconf += --target=alpha_ev5-linux
  with_real_and_xanim = true
endif
ifeq ($(with_win32),false)
  archconf += --disable-win32dll
else
  archconf += --enable-win32dll
endif
ifeq ($(with_real_and_xanim),false)
  archconf += --disable-real --disable-xanim
else
  archconf += --enable-real --enable-xanim
endif




ifeq ($(DFSG),)
DEB_BUILD_CONFIGURE += --disable-libdvdcss-internal --enable-dvdread --disable-mencoder
endif

#generate debugging symbols for mplayer-dbg
DEB_BUILD_CONFIGURE += --enable-debug

#ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
#DEB_BUILD_CONFIGURE += --enable-debug
##some other stuff below
#else
#ifneq (,$(findstring debug,$(DEB_BUILD_OPTIONS)))
#DEB_BUILD_CONFIGURE += --enable-debug=3
#endif
#endif

ifeq (linux,$(DEB_HOST_ARCH_OS))
    DEB_BUILD_CONFIGURE += --enable-tv-v4l2 --enable-xmga --enable-mga --enable-3dfx --enable-tdfxfb --enable-fbdev
endif
ifeq (kfreebsd,$(DEB_HOST_ARCH_OS))
    DEB_BUILD_CONFIGURE += --enable-tv-bsdbt848 --disable-directfb
endif


USE_EXT_FFMPEG = no
#DEB_BUILD_CONFIGURE += --enable-libavutil_so --enable-libavformat_so --enable-libavcodec_so --enable-libpostproc_so 
#EXTRA_BUILDDEP += libavcodec-dev (>= 0.svn6767), libavformat-dev (>= 0.svn6767), libpostproc-dev (>= 0.svn6767)

########### build

patch: patch-stamp
patch-stamp:
	dpatch apply-all
	dpatch cat-all >patch-stamp
unpatch:
	dpatch deapply-all
	rm -rf patch-stamp debian/patched

####### build-arch

configure: patch-stamp configure-stamp
#This is actually a configure-arch-stamp.
configure-stamp:
	dh_testdir
	#Check consistency between debian/control and what we are compiling.
	grep -x 'Source: $(package)'  debian/control
	grep -x 'Package: $(package)' debian/control
	if test "$(USE_EXT_FFMPEG)" = yes ; then for i in libavcodec libavformat libavutil libpostproc  ; do mv -v $$i $$i.disabled ; done ; fi
	# Add commands to configure the package here.
	${CLEAN_ENV} ./configure --prefix=/usr --confdir=/etc/mplayer  \
        --datadir=/usr/share/mplayer --codecsdir=/usr/lib/codecs \
        --enable-xvmc --enable-sdl --enable-ossaudio \
	--enable-lirc --enable-gui --enable-freetype --enable-menu \
	--enable-largefiles 	$(DEB_BUILD_CONFIGURE)
	#
	if test "$(svn_revision)" ; then echo  "#define VERSION \"dev-SVN-r$(svn_revision)-$(CC_version)-$(extraversion)\""  > version.h ; else sh version.sh $(CC_version)-$(extraversion) ; fi

	if test "$(USE_EXT_FFMPEG)" = yes ; then for i in libavcodec libavformat libavutil libpostproc  ; do mv -v  $$i.disabled $$i ; done ; fi

	#tweak config.mak on request
ifneq (,$(findstring nostrip,$(DEB_BUILD_OPTIONS)))
	mv config.mak  config.mak~~
	sed 's/STRIPBINARIES.*/STRIPBINARIES = no/' config.mak~~ > config.mak
	#dh_strip does(n't) the rest of the job
endif
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
	mv config.mak  config.mak~~
	sed '/FLAGS/s/ -O[0-9] /  /' config.mak~~ > config.mak
endif
	#workaround for gcc bug 475153 (hopefully)
ifeq (powerpc,$(DEB_HOST_ARCH_CPU))
	mv config.mak  config.mak~~
	sed '/FLAGS/s/ -O[0-9] / -O /' config.mak~~ > config.mak
endif
	touch configure-stamp

# commands to compile the package
build-arch: patch configure-stamp build-arch-stamp
build-arch-stamp:
	dh_testdir
ifneq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
ifeq ($(arch),i386)
	echo SORRY THIS DOES NOT WORK CURRENTLY
	cd libvo && ${CLEAN_ENV} ${MAKE}  CC='gcc -O'  osd.o
	cd libavcodec && ${CLEAN_ENV} ${MAKE} i386/dsputil_mmx.o cabac.o  OPTFLAGS=" -O2 -ffast-math -fomit-frame-pointer"
	cd libpostproc && ${CLEAN_ENV} ${MAKE} postprocess.o  OPTFLAGS=" -O2 -ffast-math -fomit-frame-pointer"
	cd mp3lib && ${CLEAN_ENV} ${MAKE} dct64_sse.o  OPTFLAGS=" -I.. -O2 -ffast-math -fomit-frame-pointer"
	cd liba52 && ${CLEAN_ENV} ${MAKE} imdct.o  OPTFLAGS=" -I.. -O2 -ffast-math -fomit-frame-pointer"
endif
endif
	#workaround for 478731 (hopefully)
	#cd gui && ${CLEAN_ENV} ${MAKE} skin/skin.o skin/font.o   OPTFLAGS=" -I. -I.. -g -Wall"

	${CLEAN_ENV} ${MAKE}
	touch build-arch-stamp

###### build-indep

# commands to compile the docs
build-indep: build-indep-stamp
build-indep-stamp:
	dh_testdir
	#Configure the independent part (not in a separate block: it is fast!).
	[ -r DOCS/.upstream_ships_docs ] || { cd DOCS/xml && ./configure ; }
	#
	[ -r DOCS/.upstream_ships_docs ] || ${CLEAN_ENV} ${MAKE} -C DOCS/xml html-chunked
	touch build-indep-stamp


build: build-indep build-arch


################ clean

clean: clean-patched unpatch

clean-patched:
	dh_testdir
	dh_testroot
	#
	#put back internal ffmpeg, just in case
	for i in libavcodec libavformat libavutil libpostproc  ; do if test -d $$i.disabled ; then  mv -v  $$i.disabled $$i ; fi ; done 
	#
	# commands to clean up after the build process
	-[ -r DOCS/.upstream_ships_docs ] || ${MAKE} -C DOCS/xml distclean
	- $(MAKE) distclean
	#- $(MAKE) -C Gui distclean
	#
	rm -f config.h config.mak build-arch-stamp build-indep-stamp configure-stamp configure.log
	#some leftovers
	find -name '*.o' -or -name '*.a' -or -name '*~' \
		-or -name semantic.cache -print0 |\
		xargs -r0 rm -v
	#
	dh_clean


##################### install

manlangs := $(notdir $(wildcard DOCS/man/*) )

install-arch:  build-arch
	dh_testdir
	dh_clean -a -k
# scripts
	chmod a+x debian/scripts/*
	dh_install debian/scripts usr/share/mplayer/
	dh_install debian/prefs var/lib/mplayer/

# commands to install the package into debian/<packagename>
	${MAKE} prefix=$(destdir)/usr BINDIR=$(destdir)/usr/bin CONFDIR=$(destdir)/etc/mplayer LIBDIR=$(destdir)/usr/lib DATADIR=$(destdir)/usr/share/mplayer  MANDIR=$(destdir)/usr/share/man  install

	dh_link usr/bin/mplayer usr/bin/gmplayer
	dh_link usr/share/man/man1/mplayer.1.gz usr/share/man/man1/gmplayer.1.gz

# Install man pages.
	set -e && for i in $(manlangs) ; do mkdir -p $(destdir)/usr/share/man/$$i/man1/ && cp DOCS/man/$$i/mplayer.1 $(destdir)/usr/share/man/$$i/man1/ && dh_link usr/share/man/$$i/man1/mplayer.1.gz usr/share/man/$$i/man1/gmplayer.1.gz ; done

	dh_installdebconf -p $(package)
	dh_installdocs  -p $(package) Copyright

	dh_installexamples etc/example.conf etc/menu.conf etc/input.conf




install-indep:  build-indep
	dh_testdir
	dh_clean -i -k
	dh_installdocs  -p mplayer-doc Copyright DOCS/HTML DOCS/tech




#####################################################
## this snippet again comes from debhelper-5.0.40/examples/rules.multi2

# This single target is used to build all the packages, all at once, or
# one at a time. So keep in mind: any options passed to commands here will
# affect _all_ packages. Anything you want to only affect one package
# should be put in another target, such as the install target.
binary-common:
	dh_testdir
	dh_testroot
	dh_installchangelogs
	dh_installdocs
	dh_installexamples
	dh_installmenu
	dh_installdebconf
	dh_installmime
	dh_installinit
	dh_installman
#       dh_installcron
#       dh_installinfo
#       dh_undocumented
	dh_strip --dbg-package=${package}-dbg
	dh_link
###### non-orthodox mungling
#	Add automatic vo list.
	if test -r	debian/$(THISPACKAGE)/DEBIAN/config ; then sh -e debian/config.augmenter debian/$(THISPACKAGE)/DEBIAN/config ; fi
#	Rewrite README.Debian and add free or non-free statement.
ifeq ($(DFSG),)
	tail -n +2  debian/README.Debian.free | sed 's!@UPSTREAMSOURCE@!$(UPSTREAMSOURCE)!' > debian/$(THISPACKAGE)/usr/share/doc/$(THISPACKAGE)/README.Debian
else
	tail -n +2  debian/README.Debian.nonfree | sed 's!@UPSTREAMSOURCE@!$(UPSTREAMSOURCE)!' > debian/$(THISPACKAGE)/usr/share/doc/$(THISPACKAGE)/README.Debian
endif
	sed 's!@DEB_BUILD_CONFIGURE@!$(DEB_BUILD_CONFIGURE)!' < debian/README.Debian  >>	 debian/$(THISPACKAGE)/usr/share/doc/$(THISPACKAGE)/README.Debian

########
	dh_compress
	dh_fixperms
	dh_makeshlibs
	dh_installdeb
	dh_shlibdeps
	dh_gencontrol
	dh_md5sums
	dh_builddeb



# Build architecture-independent packages using the common target.
binary-indep: build-indep install-indep
	$(MAKE) -f debian/rules DH_OPTIONS=-i THISPACKAGE=mplayer-doc binary-common

# Build architecture-dependent packages using the common target.
binary-arch: build-arch install-arch
	$(MAKE) -f debian/rules DH_OPTIONS=-a THISPACKAGE=mplayer binary-common

# Any other binary targets build just one binary package at a time.
binary-%: build install
	make -f debian/rules binary-common DH_OPTIONS=-p$*

binary: binary-indep binary-arch



#####################################################
##This target generates debian/control. It is not automatically invoked.
autocontrol:
	mv -b debian/control debian/control.bak
	sed 's/@MPLAYER@/$(package)/;s/@XLIBS@/$(XLIBS)/;s/@EXTRA_BUILDDEP@/$(EXTRA_BUILDDEP)/;s/@DFSG@/$(DFSG)/;s/@DOCDEP@/$(DOCDEP)/' < debian/control.in >  debian/control
	#Enjoy the difference.
	! diff -u debian/control.bak debian/control || echo NO CHANGES

###############################################
##These targets generate the DFSG-free tar.gz.
## They are not automatically invoked.

##temporary dir
D := temp_dir_to_debianize_mplayer

##What we expect to find in a tar.bz2 from upstream.
M := MPlayer-$(upstreamversion)


download-and-unpack-orig:
	mkdir $(D)
	###Darn, this does not work in any dir (as requested by policy).
	# $(dirname ??)/scripts/binary_codecs.sh download MPlayer-$(upstreamversion).tar.bz2
	### Download file, or link it if available.
	if [ -r  $(M).tar.bz2 ] ; then  ln -s ../$(M).tar.bz2 $(D)/. ; elif 	  [ -r  ../$(M).tar.bz2 ] ; then  ln -s ../../$(M).tar.bz2 $(D)/. ; else  cd  $(D) && wget -N $(UPSTREAMSOURCE) ; fi
	cd $(D) && tar xjf  $(M).tar.bz2 && rm $(M).tar.bz2

copy-orig-from-svn: ../mplayer/.svn /usr/bin/svn
	mkdir $(D)
	cp -al ../mplayer $(D)/$(M)
	cd $(D)/$(M) && LC_ALL=C svn info 2> /dev/null | grep Revision | cut -d' ' -f2 > revision.svn
	find $(D)/$(M) -type d -name .svn  | xargs rm -r

##Part of the source that is not shipped with Debian.
E := mplayer-non-DFSG-$(debian_version)

##Part of the source that is shipped with Debian.
S := mplayer-$(debian_version)


fix-orig-source: $(D)/$(M)
	mkdir $(D)/$(E)
	# This contains the dreaded DVD decryption code. We can live without it
	#  by using libdvdread3 (and the optional library installed by
	#    http://www.debian-unofficial.org/   :-)
	cd $(D) &&  mv $(M)/libdvdcss  $(E)
	# Well this may seem a bit excessive... But this code is not useful
	#  for building the package, and most of it does not correctly state
	#  author-license-copyright:  So I throw out the baby and the bath...
	# When and if someone needs this stuff, I will carefully scrutinize
	#  it and add what is suitable.
	cd $(D) && mv $(M)/TOOLS $(E)
	#Check if upstream includes DOCS and then don't rebuild them.
	cd $(D)/$(M)/DOCS && if [ -r HTML ] ; then touch .upstream_ships_docs; fi
	# My debian dir is too different.
	cd $(D)/$(M) && mv debian debian_upstream
	# Do not support encoding in any way.
	cd $(D) && mv $(M)/mencoder.c  $(E)
	# OK, let's repackage.
	cd $(D) && mv MPlayer-$(upstreamversion) $(S) && 	 tar czf  ../mplayer_$(debian_version).orig.tar.gz $(S) &&  rm -r $(S)

	cd $(D) && tar czf  mplayer-non-DFSG_$(debian_version).tar.gz $(E) && gpg  --passphrase yes -c mplayer-non-DFSG_$(debian_version).tar.gz   && mv mplayer-non-DFSG_$(debian_version).tar.gz.gpg .. && rm -r $(E) mplayer-non-DFSG_$(debian_version).tar.gz
	rmdir $(D)

#unfix-orig-source: debian/mplayer.menu
#	if [ -r  $(M).tar.bz2 ] ; then  ln -s ../$(M).tar.bz2 $(D)/. ; elif 	  [ -r  ../$(M).tar.bz2 ] ; then  ln -s ../../$(M).tar.bz2 $(D)/. ; else  cd  $(D) && wget -N $(UPSTREAMSOURCE) ; fi
#	cd $(D) && tar xjf  $(M).tar.bz2 && rm $(M).tar.bz2


# This will fail for Subversion-derived sources.
get-orig-source : download-and-unpack-orig  fix-orig-source

.PHONY: build clean binary-indep binary-arch binary-common binary install binary binary-arch binary-indep clean checkroot get-orig-source autocontrol fix-orig-source copy-orig-from-svn download-and-unpack-orig
